package com.Expert;

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.util.Stack;

public class Expert_1218{
	
	public static void main(String[] args) throws Exception {
		BufferedReader br = 
				new BufferedReader(new InputStreamReader(System.in));
		int ans; // 0 , 1
		
		for (int tc = 1; tc <= 10; tc++) {
			ans=1;
			//trim -> 혹시 모를 공백을 제거해준다.
			int N = Integer.parseInt(br.readLine().trim());
			//double d = Double.parseDouble("2.34");
			
			String line = br.readLine(); //괄호들 문자열[][[))....
			int length = line.length();
			
			//<>안에는 참조형만 들어갈 수 있다.
			Stack<Character> stack = new Stack<>();
			if(length % 2 ==1) { //짝이 안맞음
				ans =0;
				
			}else { //문자열 길이가 짝수
				for (int j = 0; j < args.length; j++) {
					char c = line.charAt(j); //한글자 꺼내기
					
					if(c=='{' || c=='<' || c=='[' || c=='(') { // 여는 괄호의 경우
						stack.push(c); //스택에 넣기
					}else { // 닫는 괄호들
						//c의 짝이 되는 괄호를 리턴하는 함수
						char pair = getPair(c);
						if(stack.pop() != pair) {
							ans =0;
							break;
						} // if
					} // else
				} // for
				
				//문자열 길이는 짝수이지만 스택에 데이터가 남아 있는 경우
				if(!stack.empty()) {
					ans =0;
				} // if
			} // else
			System.out.println("#" + tc + " " + ans);
		}//for
	} // main
	
	//c와 짝이되는 대응하는 괄호를 찾아줌
	private static char getPair(char c) {
		//닫는 괄호를 가지고 찾으러 옴!
		switch (c) {
		case '}': return '{';
		case ']': return '[';
		case '>': return '<';
		case ')': return '(';
		}
		return 0;
	}
}

//package com.Expert;
//
//import java.util.HashMap;
//import java.util.Scanner;
//import java.util.Stack;
//
//public class Expert_1218{
//	static char[] arr;
//	static HashMap<Character,Character> bracket;
//	
//	private static boolean solve() {
//		Stack<Character> stack = new Stack<>();
//		for(int i = 0 ; i < arr.length;i++) {
//			if(arr[i]=='(' || arr[i]=='{'||arr[i]=='['||arr[i]=='<') { 
//				stack.push(arr[i]);
//			}
//			else {
//				if(stack.isEmpty()) return false;
//				if(bracket.get(stack.pop())!=arr[i]) {
//					return false;
//				}
//			}
//		}
//		return stack.isEmpty() ? true : false;
//	}
//	
//	public static void main(String[] args) {
//		Scanner sc= new Scanner(System.in);
//		
//		bracket = new HashMap<>();
//		bracket.put('(', ')');
//		bracket.put('{', '}');
//		bracket.put('[', ']');
//		bracket.put('<', '>');
//	}
//}

//package com.Expert;
//
//import java.util.Scanner;
//
//public class Expert_1218 {
//	static String input="182\r\n" + 
//			"(({<(({{[[[[<<[[(<[[{([{{{[<[[[{<<(<[[{}[]{}{}[]]]><><>{})[]{}><>[]<>><>}][]]<>{}]>]()}()()(){}}}{}][])(){}<>()}]{}[]]>()[][][]){}]]{}[]<>><>{}[]{}<>>]]]][]{}{}[]()}}))>}<>{}()))[][]\r\n" + 
//			"298\r\n" + 
//			"{({{[({([{(<[([(([<({[{{[[({{[({([<{(<[[(<((<[{[<[([((<{{[([{<<[{(<({[<{}()>[]<>][]})>[])<>()[]}]>><>(){}()[]}]{}()<>[]<>)<>{}<>{}{}]}()}<>>)[]){}])]>[][]{}]()}][]()>[]))[]>)]][]>)[]{}}[]<><>>]()[])}{}){}]}}<><>){}][]{}{}]<>[]}(){}<>}][]})[]()><>]))])]>{}{}())}{}])<>}{})]{}{}}[])())<>{}[]<><>}[]{}\r\n" + 
//			"230\r\n" + 
//			"[({([<[<[<<(([{([<((({<{([{[<[<<<([<[<([[{([<[{({([<(<[[][]]<>{}<>[]>){}{}<>>]{}())})}[]]{}>[][][]]()[][]<><>()<>){}}]])[][][]>]>()](){}[])>>><><>{}]>]{}[]}<>][]())}[][]>}<>)()))>{}[]()])[][]}]<>()<>))>>()][]>][][]>]())}<><>{}<>)]\r\n" + 
//			"226\r\n" + 
//			"[[[{{[[<[([((([({{[{<<([[[([[{<[{{<{[<[([<<<((([{(<({<([(<><>){}])()[]>}<>())>){}}]))){}>()<><>>>[]]<>)]>]{}()}(){}>()<><>}}]()>}<>{}]])<>{}]()(){}][]()])[]{}(){}<>>[]>}{}{}](){}}})()])(){}<>))][])[]()<>]<><>>]()][]{}}}[]]]]()\r\n" + 
//			"242\r\n" + 
//			"((([<[{{<[<{<{({(({({({<{{{((([{[({[{<{{(([[{([{<<({<[]>}){}[]()()>>}[][]()][]<>){}<>}]]))}[]}()><>[]}(){}]()[][][]})]<>}{}<>](){}){}){})<><><>{}<>[]}}<>{}{}}{}[]>{}}(){}){}<>})}))[]})()}>[]{}{}()}>]>{}[][][][]}}][][][]{}<>>][])()[]))()()[]{}\r\n" + 
//			"138\r\n" + 
//			"{[<(({[{(({[(({{{]{<[([[({[[[[<>]]]{}]{}})]]()<>{}{}<>()<>)()<>{}[]<>]>{}})<>()<><><>}{}}}())){}]}))}()<>()[]{}]})<><><><>)>[][][]]}<>[]{}\r\n" + 
//			"238\r\n" + 
//			"{<[[({[([{{(({{((<({(<{{([<{<([((<<(<{[<<([{{[<[{<{{{[<[{<{[[]]}()[][]}()}]>]}{}{}}<>[]<>{}(){}}>}]{}{}><>[]]}[]{}()[]{}}]{}())()<><>()>>]()<>}>{}[])<>()>>()))()])>{}}>])}{}{}}>)()<>[]}){}>)<>)()}}())){}<>()}[][]}]){}<>[]<>]}[])]()]()>}<>\r\n" + 
//			"272\r\n" + 
//			"([{[<[[([([{[[([[({([(<[[[<{(({<([{([{<{[<<((({(<{<[({<{<<([[{<[[{{[<(([{}])<>)[]>]()<>}<>}[]]]{}()>}][]]{})<>{}[]>>}>{}<>}{})()]<>><>}[][]>)<>{}}[]<>))){}[]>>[]]}[]>}][])[]}]())>[]{}{}}[]{}))}>(){}[]{}]<>{}]]()>)<><><><>[]])}{})[]()]])]]}])<>][]{}<>)()]<><>()]>]<>}<>()])\r\n" + 
//			"218\r\n" + 
//			"[{({[<{[<{[[[<[{[[[[{([{[<[[<<[{{((<[([[<[(<[({}[]<>[]()[]()(){}){})<>()>[][]<>[])<><>[](){}[]{}<>]><>]])]>[]){}<>)[][]}}<><>()<>]<>><>{}>[]<>]{}]>]<>}]{}())[]}[]]<>]]]}]()>]<>(){}]()<>()]()}>{}<>]{}}>]()[]()[]})()}]()\r\n" + 
//			"258\r\n" + 
//			"({{[({<{<<{{([[<{({{{[[({[<(<{<<{<<{{{{([{[{<{{[<<[[[<[{<(<[({(<>)})]><>[])()>{}}[]]{}<>><>]]]<>>{}>]}{}[]}>}]<>[]}]){}<>{}}[]}}}{}<>>>}>[]><><>()<>[]}><>)><><><>]}){}]]<>[]<>}[]<>{}}}()<>)}<>{}[]>][]{}])<>[][]{}}()}>[]<>>}<><>>()}{}<><>[]()())<>]}{}{}[]}[])";
//	public static void main(String[] args) {
//		Scanner sc = new Scanner(input);
//		
//		for (int tc = 1; tc <= 10; tc++) {
//			//(){}[]<>순
//			int fir = 0;
//			int sec = 0;
//			int thi = 0;
//			int fou = 0;
//			int num = sc.nextInt();
//			String Arr = sc.next();		
//			
//			for (int i = 0; i < num; i++) {
//				switch (Arr.charAt(i)) {
//				case '(':
//					fir+=1;
//					break;
//				case ')':
//					fir-=1;
//					break;
//				case '{':
//					sec+=1;
//					break;
//				case '}':
//					sec-=1;
//					break;
//				case '[':
//					thi+=1;
//					break;
//				case ']':
//					thi-=1;
//					break;
//				case '<':
//					fou+=1;
//					break;
//				case '>':
//					fou-=1;
//					break;
//				}
//			}
//			if(fir==0&&sec==0&&thi==0&&fou==0) {
//				System.out.println("#"+tc+" 1");
//			}else {
//				System.out.println("#"+tc+" 0");
//			}
//		}
//	}
//}
